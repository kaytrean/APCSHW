graphs - collection of nodes and edges
node - holds stuff
edge - connects nodes
cyclic and acyclic graph (we started a node, can we get back to that node without going back?)

weights - some associated value with the edge
in weighted graph, both nodes and edges have stuff
directed graph - can't get to a particular node 
DAG - Directed Acyclic Graph
Trees - empty or acycilic graph with one node designated as the root
  ~root - starting point
  ~child - connected to end level down from its parent node
  ~leaf - node with 0 children
  ~path - sequence of nodes and/or edges connecting 2 nodes
  ~ancestors - any nodes above you connecting you to the root
  ~descendants - any nodes on your subtrees
  ~height - length of longest root to leaf path
  ~fullest - one with maxium number of nodes
  ~balance - number of nodes coming off 
  
Binary Tree - each node has 0, 1 or 2 children; either leaf or a left/right child
  binary search tree - tree where given the value V in any node n, all the values in n's left subtree are less than
  v, and all of the values in n's right subtree are greater that v
  
public Node search(Node T, integer i){
  while (T != null){
  int c - T.getData().moveTo(i);
  if (c==0){
    return T;
    }
  else if (c>0){
    T=T.getRight();
    }
  else {
    T=T.getLeft();
    }
  return null;
  }
}

insert 
  node n = new node(i);
  if (T== null){
    T=n;
  return
  }
  
insert as a new leaf
  1. set t to root
  2. search for n but use c piggyback pointer T2 to follow T
  3. T2 now points to new node's parent
  4. Insert new node to the left or right of T2 as apporpriate
